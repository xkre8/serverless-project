name: Destroy AWS Resources

on:
  workflow_dispatch:  # Manual trigger only

env:
  AWS_REGION: ap-southeast-1

jobs:
  destroy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Initialize Terraform
      working-directory: terraform
      run: terraform init

    - name: Import existing resources (if needed)
      working-directory: terraform
      continue-on-error: true
      run: |
        echo "Checking existing AWS resources..."
        
        # Check if Lambda function exists
        if aws lambda get-function --function-name simple-serverless-hello; then
          echo "Lambda function exists, importing..."
          terraform import aws_lambda_function.hello simple-serverless-hello || true
        fi
        
        # Check if IAM role exists
        if aws iam get-role --role-name simple-serverless-lambda-role; then
          echo "IAM role exists, importing..."
          terraform import aws_iam_role.lambda_role simple-serverless-lambda-role || true
        fi
        
        # Check if API Gateway exists
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='simple-serverless-api'].id" --output text)
        if [ ! -z "$API_ID" ] && [ "$API_ID" != "None" ]; then
          echo "API Gateway exists, importing..."
          terraform import aws_api_gateway_rest_api.api $API_ID || true
        fi

    - name: Force destroy existing resources with AWS CLI
      continue-on-error: true
      run: |
        echo "🗑️ Force deleting AWS resources via CLI..."
        
        # Delete old Lambda functions
        aws lambda delete-function --function-name simple-serverless-hello || echo "Old Lambda function not found"
        aws lambda delete-function --function-name simple-serverless-hello-v2 || echo "New Lambda function not found"
        
        # Delete old API Gateways
        OLD_API_ID=$(aws apigateway get-rest-apis --query "items[?name=='simple-serverless-api'].id" --output text)
        if [ ! -z "$OLD_API_ID" ] && [ "$OLD_API_ID" != "None" ]; then
          aws apigateway delete-rest-api --rest-api-id $OLD_API_ID || echo "Old API Gateway deletion failed"
        fi
        
        NEW_API_ID=$(aws apigateway get-rest-apis --query "items[?name=='simple-serverless-api-v2'].id" --output text)
        if [ ! -z "$NEW_API_ID" ] && [ "$NEW_API_ID" != "None" ]; then
          aws apigateway delete-rest-api --rest-api-id $NEW_API_ID || echo "New API Gateway deletion failed"
        fi
        
        # Detach policies from old and new IAM roles
        aws iam detach-role-policy --role-name simple-serverless-lambda-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || echo "Old policy detach failed"
        aws iam detach-role-policy --role-name simple-serverless-lambda-role-v2 --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || echo "New policy detach failed"
        
        # Delete old and new IAM roles
        aws iam delete-role --role-name simple-serverless-lambda-role || echo "Old IAM role deletion failed"
        aws iam delete-role --role-name simple-serverless-lambda-role-v2 || echo "New IAM role deletion failed"
        
        # Delete CloudWatch log groups
        aws logs delete-log-group --log-group-name /aws/lambda/simple-serverless-hello || echo "Old log group deletion failed"
        aws logs delete-log-group --log-group-name /aws/lambda/simple-serverless-hello-v2 || echo "New log group deletion failed"

    - name: Destroy AWS Resources
      working-directory: terraform
      run: terraform destroy -auto-approve

    - name: Confirm Destruction
      run: |
        echo "🗑️ **AWS Resources Destroyed!**" >> $GITHUB_STEP_SUMMARY
        echo "All resources have been removed from AWS" >> $GITHUB_STEP_SUMMARY
        echo "💰 **No more charges will be incurred**" >> $GITHUB_STEP_SUMMARY
